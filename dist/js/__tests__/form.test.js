import{describe,expect,it,vi,beforeEach}from"vitest";import{Window}from"happy-dom";import fs from"fs";import path from"path";import{extractFormData}from"../utils/form";const htmlDocPath=path.join(process.cwd(),"index.html"),htmlDocumentContent=fs.readFileSync(htmlDocPath).toString(),window=new Window,document=window.document;vi.stubGlobal("document",document);const testFormData=vi.fn((t=>({get:e=>{for(const o of Object.keys(t))return o===e?t[e]:null}})));vi.stubGlobal("FormData",testFormData),beforeEach((()=>{document.body.innerHTML="",document.write(htmlDocumentContent)})),describe("extractFormData()",(()=>{it("should be defined",(()=>{expect(extractFormData).toBeDefined()})),it("should return either a string or null given an object and a string",(()=>{const t={search:"Job",name:"Daniel"},e=extractFormData(t,"search"),o=extractFormData(t,"Not search");expect(e).toBe("Job"),expect(o).toBeNull()})),it('should return null if a string isn"t passed in as the second parameter',(()=>{const t={search:"Job",name:"Daniel"},e=extractFormData(t,25),o=extractFormData(t,[]),a=extractFormData(t,{a:"b"});expect(e).toBeNull(),expect(o).toBeNull(),expect(a).toBeNull()})),it('should return null if an object is"t passed in as the first parameter',(()=>{const t="hello",e=extractFormData("a string",t),o=extractFormData(23,t),a=extractFormData([1,2,3,"4"],t);expect(e).toBeNull(),expect(o).toBeNull(),expect(a).toBeNull()}))}));
//# sourceMappingURL=form.test.js.map