import{describe,expect,it,vi,beforeEach}from"vitest";import{Window}from"happy-dom";import fs from"fs";import path from"path";import{changeClassName,setLabel,storeTheme,handleClick}from"../utils/dom";import{validationError}from"../utils/errors";const htmlDocPath=path.join(process.cwd(),"index.html"),htmlDocumentContent=fs.readFileSync(htmlDocPath).toString(),window=new Window,document=window.document;vi.stubGlobal("document",document),vi.mock("../utils/dom",(()=>({changeClassName:(e,t)=>{if(!(e instanceof window.Element&&"string"==typeof t))throw new validationError("Either an argument that wasn't an HTMLElement was passed in or a string wasn't passed in");e.className=t},setLabel:(e,t,n)=>{e.getAttribute("for")===t?e.dataset[n]="true":e.dataset[n]="false"},storeTheme:e=>{window.localStorage.setItem("theme",e)},handleClick:(e,t)=>{vi.fn(),vi.fn();const n=vi.fn();t.forEach((e=>{if(!(e instanceof window.HTMLLabelElement))throw new validationError("One of the elements is not an instance of HTMLLabelElement");n()}))}}))),beforeEach((()=>{document.body.innerHTML="",document.write(htmlDocumentContent)})),describe("changeClassName()",(()=>{it("should be defined",(()=>{expect(changeClassName).toBeDefined})),it("should return undefined if an Element and a string are passed in",(()=>{const e=window.HTMLButtonElement,t=changeClassName(new e,"new-class-name");expect(t).toBeUndefined()})),it("should throw if anything other than an Element and a string are passed in",(()=>{expect((()=>changeClassName({},23))).toThrowError(validationError),expect((()=>changeClassName("Element","23"))).toThrowError(validationError)})),it("should throw if no arguments are passed in",(()=>{expect((()=>changeClassName())).toThrowError(validationError)})),it("should change the class name of the element passed in",(()=>{const e=new window.HTMLInputElement;e.className="old-class-name",changeClassName(e,"new-class-name"),expect(e.getAttribute("class")).toBe("new-class-name")}))})),describe("setLabel()",(()=>{it("should throw an error if anything other than an html element is passed in as the first argument",(()=>{expect((()=>setLabel("a","b","c"))).toThrow(),expect((()=>setLabel({},"b","c"))).toThrow(),expect((()=>setLabel([1,2],"b","c"))).toThrow(),expect((()=>setLabel(new window.HTMLButtonElement,"b","c"))).not.toThrow(),expect((()=>setLabel(new window.HTMLElement,"b","c"))).not.toThrow(),expect((()=>setLabel())).toThrow()})),it("should change the the data attribute of an element that has the for attribute on it to true or false",(()=>{const e=new window.HTMLLabelElement,t=new window.HTMLLabelElement;e.setAttribute("for","key"),t.setAttribute("for","door"),setLabel(e,"key","someAttr"),setLabel(t,"key","someAttr"),expect(e.dataset.someAttr).toBe("true"),expect(t.dataset.someAttr).toBe("false")})),it('should create a new data attribute and set it to true for an html element that isn"t an HTMLLabelElement with a "for" attribute',(()=>{const e=new window.HTMLButtonElement;e.setAttribute("for","key"),setLabel(e,"key","someAttr"),expect(e.dataset.someAttr).toBe("true")}))})),describe("storeTheme()",(()=>{it("should return the passed in string when the getItem method is used",(()=>{storeTheme("a-theme");const e=window.localStorage.getItem("theme");expect(e).toBe("a-theme")}))})),describe("handleClick()",(()=>{let e,t;beforeEach((()=>{e=new window.HTMLBodyElement,t=[new window.HTMLLabelElement,new window.HTMLLabelElement]})),it("should be defined",(()=>{expect(handleClick).toBeDefined()})),it("should not throw even though changeClassName,StoreTheme and setLabel have been set to empty spy functions",(()=>{expect((()=>handleClick(e,t))).not.toThrow()})),it('should throw an error if an array-like structure of HTMLLabelElements isn"t passed as an parameter',(()=>{const t=[new window.HTMLButtonElement,new window.HTMLButtonElement];expect((()=>handleClick(e,t))).toThrow(validationError)}))}));
//# sourceMappingURL=dom.test.js.map